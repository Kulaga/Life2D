{"version":3,"sources":["Models/CellState.js","Cell.js","Models/Key.js","Board.js","Controls/NumberInput.js","ControlPanel.js","Models/Cell.js","Models/LifeGame.js","BoardHistory.js","Models/HistoryState.js","App.js","serviceWorker.js","index.js"],"names":["CellState","Dead","Alive","Cell","props","switchSelection","cellIsSelected","state","style","backgroundColor","this","className","onClick","React","Component","Key","rowNum","colNum","_separator","toString","Board","key","cellState","newState","board","slice","onBoardChange","generateBoard","id","iterationNumber","rows","i","getRows","row","j","getColumns","push","createCell","columns","NumberInput","name","type","min","max","defaultValue","value","onChange","event","onValueChange","parseInt","target","ControlPanel","onRowsValueUpdate","gridConfig","maxRows","minRows","selectedRows","onGridConfigChange","onColumnsValueUpdate","maxColumns","minColumns","selectedColumns","startGame","resetGame","col","LifeGame","rowSize","colSize","currentState","nextState","copyArray","aliveCells","getCellIndexes","length","cell","shouldDie","shouldBeAlive","boardsAreEqual","isAlive","isUnderpopulated","isOverpopulated","getNeighbors","filter","c","copy","toProjectedRow","toProjectedCol","getNeighborsIndexes","map","index","number","BoardHistory","boards","boardStates","historyState","boardState","HistoryState","App","inProgress","setState","nextIterationBoard","game","createEmptyBoard","intervalId","setInterval","tick","updateHistory","newHistoryStates","historyStates","unshift","stopGame","clearTimeout","GenerateInitialState","initialBoard","Array","fill","newIteration","getNextIteration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c733615.chunk.js","sourcesContent":["const CellState = {\r\n    Dead: \"Dead\",\r\n    Alive: \"Alive\"\r\n}\r\n\r\nexport default CellState;","import React from 'react';\r\nimport CellState from \"./Models/CellState\";\r\n\r\n\r\nclass Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var style = {\r\n            backgroundColor: this.props.state == CellState.Alive ? \"#91C5FF\" : \"white\"\r\n        };\r\n\r\n        return <div className=\"cell\" style={style} onClick={this.switchSelection}></div>\r\n    }\r\n\r\n    switchSelection = () => {\r\n        this.props.cellIsSelected(this.props.state === CellState.Dead ? CellState.Alive : CellState.Dead);\r\n    }\r\n}\r\n\r\nexport default Cell;\r\n","class Key {\r\n    constructor(rowNum, colNum) {\r\n        this.rowNum = rowNum;\r\n        this.colNum = colNum;\r\n        this._separator = \",\"\r\n    }\r\n\r\n    toString() {\r\n        return this.rowNum.toString() + this._separator + this.colNum.toString();\r\n    }\r\n}\r\n\r\nexport default Key;","import React from 'react';\r\nimport Cell from \"./Cell\";\r\nimport Key from \"./Models/Key\"\r\nimport CellState from \"./Models/CellState\";\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let board = this.generateBoard();\r\n        return ( <div id=\"board\" className=\"board\">\r\n                    <h5>Iteration: {this.props.iterationNumber}</h5>\r\n                    {board}\r\n                </div> );\r\n    }\r\n\r\n    generateBoard() {\r\n        let rows = [];\r\n\r\n        for (let i = 0; i < this.getRows(); i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.getColumns(); j++) {\r\n                row.push(this.createCell(new Key(i, j), this.props.board[i][j]));\r\n            }\r\n            rows.push((<div key={i} className=\"board-row\">{row}</div>))\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    getColumns() {\r\n        return this.props.columns;\r\n    }\r\n\r\n    getRows() {\r\n        return this.props.rows;\r\n    }\r\n\r\n    createCell(key, state) {\r\n        return (<Cell\r\n            state={state}\r\n            key={key}\r\n            cellIsSelected = { (cellState) => this.cellIsSelected(key, cellState)} />);\r\n    }\r\n\r\n    cellIsSelected = (key, cellState) => {\r\n        let newState = this.props.board.slice();\r\n        newState[key.rowNum][key.colNum] = cellState;\r\n        this.props.onBoardChange(newState);\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nclass NumberInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group mb-4\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\">{this.props.name}</span>\r\n                </div>\r\n                <input \r\n                    type=\"number\" \r\n                    min={this.props.min}\r\n                    max={this.props.max}\r\n                    defaultValue={this.props.value} \r\n                    className=\"form-control\" \r\n                    onChange={(event) => this.props.onValueChange(parseInt(event.target.value, 10))}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberInput;","import React from 'react';\r\nimport NumberInput from './Controls/NumberInput'\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.gridConfig = {...props.gridConfig}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"control-panel\">                \r\n                <NumberInput name=\"Rows\" \r\n                    value={this.props.gridConfig.selectedRows} \r\n                    onValueChange={this.onRowsValueUpdate}\r\n                    min={this.props.gridConfig.minRows}\r\n                    max={this.props.gridConfig.maxRows}/>\r\n                <NumberInput name=\"Columns\" \r\n                    value={this.props.gridConfig.selectedColumns} \r\n                    onValueChange={this.onColumnsValueUpdate}\r\n                    min={this.props.gridConfig.minColumns}\r\n                    max={this.props.gridConfig.maxColumns}/>\r\n                <button type=\"button\" className=\"btn btn-outline-primary m-1\" onClick={this.props.startGame}>Start</button>\r\n                <button type=\"button\" className=\"btn btn-outline-secondary m-1\" onClick={this.props.resetGame}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onRowsValueUpdate = (value) => {\r\n        if (value < this.props.gridConfig.maxRows && value > this.gridConfig.minRows) {\r\n            this.gridConfig.selectedRows = value;\r\n            this.props.onGridConfigChange(this.gridConfig);\r\n        }\r\n    }\r\n\r\n    onColumnsValueUpdate = (value) => {\r\n        if (value < this.props.gridConfig.maxColumns && value > this.gridConfig.minColumns) {\r\n            this.gridConfig.selectedColumns = value;\r\n            this.props.onGridConfigChange(this.gridConfig);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","class Cell {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n}\r\n\r\nexport default Cell;","import CellState from \"./CellState\";\r\nimport Cell from \"./Cell\";\r\n\r\nclass LifeGame {\r\n    constructor(rowSize, colSize) {\r\n        this.rowSize = rowSize;\r\n        this.colSize = colSize;\r\n    }\r\n\r\n    getNextIteration(currentState) {\r\n        const nextState = this.copyArray(currentState);\r\n        const aliveCells = this.getCellIndexes(currentState);\r\n\r\n        for (let i = 0; i < aliveCells.length; i++) {\r\n            let cell = aliveCells[i];\r\n            if (this.shouldDie(currentState, cell)) {\r\n                nextState[cell.row][cell.col] = CellState.Dead;\r\n                continue;\r\n            }\r\n            if (this.shouldBeAlive(currentState, cell)) {\r\n                nextState[cell.row][cell.col] = CellState.Alive;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if(this.boardsAreEqual(currentState, nextState)){\r\n            return null;\r\n        }\r\n\r\n        return nextState;\r\n    }\r\n\r\n    shouldDie(currentState, cell) {\r\n        return this.isAlive(currentState, cell.row, cell.col) &&\r\n            (this.isUnderpopulated(currentState, cell) || this.isOverpopulated(currentState, cell));\r\n    }\r\n\r\n    shouldBeAlive(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length === 3;\r\n    }\r\n\r\n    copyArray(board) {\r\n        let copy = [];\r\n        for (const row of board) {\r\n            copy.push(row.slice())\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    getCellIndexes(currentState) {\r\n        let aliveCells = [];\r\n        for (let i = 0; i < this.rowSize; i++) {\r\n            for (let j = 0; j < this.colSize; j++) {\r\n                aliveCells.push(new Cell(i, j));\r\n            }\r\n        }\r\n        return aliveCells;\r\n    }\r\n\r\n    isOverpopulated(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length > 3;\r\n    }\r\n\r\n    getNeighborsIndexes(row, col) {\r\n        return [\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col)),\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col + 1)),\r\n            new Cell(this.toProjectedRow(row) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row) , this.toProjectedCol(col + 1)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col + 1))\r\n        ]\r\n    }\r\n\r\n    getNeighbors(cell, board) {\r\n        return this.getNeighborsIndexes(cell.row, cell.col).map((index) => board[index.row][index.col]);\r\n    }\r\n\r\n    isUnderpopulated(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length < 2;\r\n    }\r\n\r\n    toProjectedRow(number) {\r\n        return (number + this.rowSize) % this.rowSize;\r\n    }\r\n\r\n    toProjectedCol(number) {\r\n        return (number + this.colSize) % this.colSize;\r\n    }\r\n\r\n    isAlive(board, rowNum, colNum) {\r\n        return board[rowNum][colNum] === CellState.Alive;\r\n    }\r\n\r\n    boardsAreEqual(currentState, nextState) {\r\n        for (let i = 0; i < this.rowSize; i++) {\r\n            for (let j = 0; j < this.colSize; j++) {\r\n                if (currentState[i][j] != nextState[i][j]){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default LifeGame;\r\n","import React from 'react';\r\nimport Board from './Board'\r\nimport Transition  from 'react-transition-group';\r\n\r\n\r\nclass BoardHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var boards = [];\r\n        for (let i = 0; i < this.props.boardStates.length; i++) {\r\n            const historyState = this.props.boardStates[i];\r\n            boards.push((\r\n                    <Board\r\n                        iterationNumber={historyState.iterationNumber}\r\n                        key={i}\r\n                        rows={10}\r\n                        columns={10}\r\n                        board={historyState.boardState}/>\r\n                ))\r\n        }\r\n\r\n        return (\r\n                <div className=\"historyContainer\">\r\n                    <h2>HISTORY</h2>\r\n                    {boards}\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default BoardHistory;","class HistoryState {\r\n    constructor(iterationNumber, boardState) {\r\n        this.iterationNumber = iterationNumber;\r\n        this.boardState = boardState;\r\n    }\r\n}\r\n\r\nexport default HistoryState;","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Board';\r\nimport ControlPanel from './ControlPanel';\r\nimport CellState from \"./Models/CellState\";\r\nimport LifeGame from \"./Models/LifeGame\";\r\nimport BoardHistory from \"./BoardHistory\";\r\nimport HistoryState from \"./Models/HistoryState\";\r\nimport { thisExpression } from '@babel/types';\r\n\r\nclass App extends React.Component {\r\n    inProgress = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.intervalId = null;\r\n        let gridConfig = {\r\n            minRows: 10,\r\n            maxRows: 50,\r\n            minColumns: 10,\r\n            maxColumns: 50,\r\n            selectedRows: 10,\r\n            selectedColumns: 10\r\n        };\r\n        this.game = new LifeGame(gridConfig.selectedRows, gridConfig.selectedColumns);\r\n        this.state = {\r\n            iterationNumber: 0,\r\n            historyStates: [],\r\n            gridConfig: gridConfig,\r\n            nextIterationBoard: this.createEmptyBoard(gridConfig)\r\n        }\r\n    }\r\n\r\n    createEmptyBoard(gridConfig) {\r\n        let initialBoard = new Array(gridConfig.selectedRows);\r\n        for (let i = 0; i < gridConfig.selectedRows; i++) {\r\n            initialBoard[i] = new Array(gridConfig.selectedColumns).fill(CellState.Dead)\r\n        }\r\n        return initialBoard;\r\n    }\r\n\r\n    onBoardChange = (newState) => {\r\n        this.setState({\r\n            nextIterationBoard: newState\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid mt-5\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-5 ml-left\">\r\n                        <BoardHistory boardStates={this.state.historyStates}/>\r\n                    </div>\r\n                    <div className=\"main-board mt-5\">\r\n                        <Board\r\n                            rows={this.state.gridConfig.selectedRows}\r\n                            columns={this.state.gridConfig.selectedColumns}\r\n                            iterationNumber = {this.state.iterationNumber}\r\n                            board={this.state.nextIterationBoard}\r\n                            onBoardChange={this.onBoardChange}/>\r\n                    </div>\r\n                    <div className=\"col-2 mt-5 mr-auto\">\r\n                        <ControlPanel \r\n                            startGame={this.startGame} \r\n                            resetGame={this.resetGame} \r\n                            gridConfig={this.state.gridConfig}\r\n                            onGridConfigChange={this.onGridConfigChange} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onGridConfigChange = (gridConfig) => {\r\n        this.game = new LifeGame(gridConfig.selectedRows, gridConfig.selectedColumns)\r\n        this.setState({\r\n            gridConfig: gridConfig,\r\n            nextIterationBoard: this.createEmptyBoard(gridConfig)\r\n        });\r\n    }\r\n\r\n    startGame = () => {\r\n        this.inProgress = true;\r\n        this.intervalId = setInterval(() => {\r\n            this.tick()\r\n        }, 100);\r\n    }\r\n\r\n    tick() {\r\n        this.setState((state, props) => {\r\n            let newIteration = this.game.getNextIteration(state.nextIterationBoard);\r\n            if (newIteration == null) {\r\n                this.stopGame();\r\n                return;\r\n            }\r\n\r\n            return {\r\n                iterationNumber: state.iterationNumber + 1,\r\n                historyStates: this.updateHistory(state),\r\n                nextIterationBoard: newIteration\r\n            }\r\n        });\r\n    }\r\n\r\n    updateHistory = (state) => {\r\n        var newHistoryStates = [...state.historyStates];\r\n        newHistoryStates.unshift(new HistoryState (state.iterationNumber, state.nextIterationBoard));\r\n        return newHistoryStates.slice(0, 6);\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.inProgress = false;\r\n        clearTimeout(this.intervalId);\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.stopGame();\r\n        this.setState(this.GenerateInitialState())\r\n        this.setState({\r\n            historyStates: []})\r\n    }\r\n\r\n    GenerateInitialState() {\r\n        return {\r\n            iterationNumber: 0,\r\n            nextIterationBoard: this.createEmptyBoard(this.state.gridConfig)\r\n        };\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}