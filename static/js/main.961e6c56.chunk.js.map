{"version":3,"sources":["Models/CellState.js","Cell.js","Models/Key.js","Board.js","ControlPanel.js","Models/Cell.js","Models/LifeGame.js","App.js","serviceWorker.js","index.js"],"names":["CellState","Dead","Alive","Cell","props","switchSelection","cellIsSelected","state","style","width","height","border","borderRadius","backgroundColor","this","margin","onClick","React","Component","Key","rowNum","colNum","_separator","toString","Board","key","cellState","newState","board","slice","onBoardChange","generateBoard","id","rows","i","getRows","row","j","getColumns","push","createCell","className","display","columns","ControlPanel","type","startGame","resetGame","col","LifeGame","rowSize","colSize","currentState","nextState","copyArray","aliveCells","getCellIndexes","length","cell","shouldDie","shouldBeAlive","boardsAreEqual","isAlive","isUnderpopulated","isOverpopulated","getNeighbors","filter","c","copy","toProjectedRow","toProjectedCol","getNeighborsIndexes","map","index","number","App","inProgress","setState","nextIterationBoard","intervalId","setInterval","tick","stopGame","clearTimeout","GenerateInitialState","game","createEmptyBoard","initialBoard","Array","fill","newIteration","getNextIteration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.961e6c56.chunk.js","sourcesContent":["const CellState = {\r\n    Dead: \"Dead\",\r\n    Alive: \"Alive\"\r\n}\r\n\r\nexport default CellState;","import React from 'react';\r\nimport CellState from \"./Models/CellState\";\r\n\r\n\r\nclass Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var style = {\r\n            width: 30,\r\n            height: 30,\r\n            border: \"1px solid #AEC1FF\",\r\n            borderRadius: \"2px\",\r\n            backgroundColor: this.props.state == CellState.Alive ? \"#91C5FF\" : \"white\",\r\n            margin: \"1px\"\r\n        };\r\n\r\n        return <div style={style} onClick={this.switchSelection}></div>\r\n    }\r\n\r\n    switchSelection = () => {\r\n        this.props.cellIsSelected(this.props.state === CellState.Dead ? CellState.Alive : CellState.Dead);\r\n    }\r\n}\r\n\r\nexport default Cell;\r\n","class Key {\r\n    constructor(rowNum, colNum) {\r\n        this.rowNum = rowNum;\r\n        this.colNum = colNum;\r\n        this._separator = \",\"\r\n    }\r\n\r\n    toString() {\r\n        return this.rowNum.toString() + this._separator + this.colNum.toString();\r\n    }\r\n}\r\n\r\nexport default Key;","import React from 'react';\r\nimport Cell from \"./Cell\";\r\nimport Key from \"./Models/Key\"\r\nimport CellState from \"./Models/CellState\";\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let board = this.generateBoard();\r\n        return ( <div id=\"board\">{board}</div> );\r\n    }\r\n\r\n    generateBoard() {\r\n        let rows = [];\r\n\r\n        for (let i = 0; i < this.getRows(); i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.getColumns(); j++) {\r\n                row.push(this.createCell(new Key(i, j), this.props.board[i][j]));\r\n            }\r\n            rows.push((<div className=\"board-row\" key={i} style={{display: \"inline-block\"}}>{row}</div>))\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    getColumns() {\r\n        return this.props.columns;\r\n    }\r\n\r\n    getRows() {\r\n        return this.props.rows;\r\n    }\r\n\r\n    createCell(key, state) {\r\n        return (<Cell\r\n            state={state}\r\n            key={key}\r\n            cellIsSelected = { (cellState) => this.cellIsSelected(key, cellState)} />);\r\n    }\r\n\r\n    cellIsSelected = (key, cellState) => {\r\n        let newState = this.props.board.slice();\r\n        newState[key.rowNum][key.colNum] = cellState;\r\n        this.props.onBoardChange(newState);\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nclass ControlPanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"control-panel\">\r\n                <button type=\"button\" className=\"btn btn-outline-primary m-1\" onClick={this.props.startGame}>Start</button>\r\n                <button type=\"button\" className=\"btn btn-outline-secondary m-1\" onClick={this.props.resetGame}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","class Cell {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n}\r\n\r\nexport default Cell;","import CellState from \"./CellState\";\r\nimport Cell from \"./Cell\";\r\n\r\nclass LifeGame {\r\n    constructor(rowSize, colSize) {\r\n        this.rowSize = rowSize;\r\n        this.colSize = colSize;\r\n    }\r\n\r\n    getNextIteration(currentState) {\r\n        const nextState = this.copyArray(currentState);\r\n        const aliveCells = this.getCellIndexes(currentState);\r\n\r\n        for (let i = 0; i < aliveCells.length; i++) {\r\n            let cell = aliveCells[i];\r\n            if (this.shouldDie(currentState, cell)) {\r\n                nextState[cell.row][cell.col] = CellState.Dead;\r\n                continue;\r\n            }\r\n            if (this.shouldBeAlive(currentState, cell)) {\r\n                nextState[cell.row][cell.col] = CellState.Alive;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if(this.boardsAreEqual(currentState, nextState)){\r\n            return null;\r\n        }\r\n\r\n        return nextState;\r\n    }\r\n\r\n    shouldDie(currentState, cell) {\r\n        return this.isAlive(currentState, cell.row, cell.col) &&\r\n            (this.isUnderpopulated(currentState, cell) || this.isOverpopulated(currentState, cell));\r\n    }\r\n\r\n    shouldBeAlive(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length === 3;\r\n    }\r\n\r\n    copyArray(board) {\r\n        let copy = [];\r\n        for (const row of board) {\r\n            copy.push(row.slice())\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    getCellIndexes(currentState) {\r\n        let aliveCells = [];\r\n        for (let i = 0; i < this.rowSize; i++) {\r\n            for (let j = 0; j < this.colSize; j++) {\r\n                aliveCells.push(new Cell(i, j));\r\n            }\r\n        }\r\n        return aliveCells;\r\n    }\r\n\r\n    isOverpopulated(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length > 3;\r\n    }\r\n\r\n    getNeighborsIndexes(row, col) {\r\n        return [\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col)),\r\n            new Cell(this.toProjectedRow(row - 1) , this.toProjectedCol(col + 1)),\r\n            new Cell(this.toProjectedRow(row) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row) , this.toProjectedCol(col + 1)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col - 1)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col)),\r\n            new Cell(this.toProjectedRow(row + 1) , this.toProjectedCol(col + 1))\r\n        ]\r\n    }\r\n\r\n    getNeighbors(cell, board) {\r\n        return this.getNeighborsIndexes(cell.row, cell.col).map((index) => board[index.row][index.col]);\r\n    }\r\n\r\n    isUnderpopulated(board, cell) {\r\n        let neighbors = this.getNeighbors(cell, board);\r\n        return neighbors.filter(c => c == CellState.Alive).length < 2;\r\n    }\r\n\r\n    toProjectedRow(number) {\r\n        return (number + this.rowSize) % this.rowSize;\r\n    }\r\n\r\n    toProjectedCol(number) {\r\n        return (number + this.colSize) % this.colSize;\r\n    }\r\n\r\n    isAlive(board, rowNum, colNum) {\r\n        return board[rowNum][colNum] === CellState.Alive;\r\n    }\r\n\r\n    boardsAreEqual(currentState, nextState) {\r\n        for (let i = 0; i < this.rowSize; i++) {\r\n            for (let j = 0; j < this.colSize; j++) {\r\n                if (currentState[i][j] != nextState[i][j]){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default LifeGame;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Board';\r\nimport ControlPanel from './ControlPanel';\r\nimport CellState from \"./Models/CellState\";\r\nimport LifeGame from \"./Models/LifeGame\";\r\n\r\nclass App extends React.Component {\r\n    inProgress = false;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.rows = 20;\r\n        this.columns = 20;        \r\n        this.game = new LifeGame(this.rows, this.columns);\r\n        this.intervalId = null;\r\n        this.state = {\r\n            nextIterationBoard: this.createEmptyBoard()\r\n        }\r\n    }\r\n\r\n    createEmptyBoard() {\r\n        let initialBoard = new Array(this.rows);\r\n        for (let i = 0; i < this.columns; i++) {\r\n            initialBoard[i] = new Array(this.columns).fill(CellState.Dead)\r\n        }\r\n        return initialBoard;\r\n    }\r\n\r\n    onBoardChange = (newState) => {\r\n        this.setState({\r\n            nextIterationBoard: newState\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div>\r\n                        <ControlPanel startGame={this.startGame} resetGame={this.resetGame}/>\r\n                        <Board\r\n                            rows={this.rows}\r\n                            columns={this.columns}\r\n                            board={this.state.nextIterationBoard}\r\n                            onBoardChange={this.onBoardChange}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    startGame = () => {\r\n        this.inProgress = true;\r\n        this.intervalId = setInterval(() => {\r\n            this.tick()\r\n        }, 100);\r\n    }\r\n\r\n    tick() {\r\n        this.setState((state, props) => {\r\n            let newIteration = this.game.getNextIteration(state.nextIterationBoard);\r\n            if (newIteration == null) {\r\n                this.stopGame();\r\n                return this.GenerateInitialState();\r\n            }\r\n\r\n            return { \r\n                nextIterationBoard: newIteration\r\n            }\r\n        });\r\n    }\r\n\r\n    stopGame = () => {\r\n        this.inProgress = false;\r\n        clearTimeout(this.intervalId);\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.stopGame();\r\n        this.setState(this.GenerateInitialState())\r\n    }\r\n\r\n    GenerateInitialState() {\r\n        return {\r\n            nextIterationBoard: this.createEmptyBoard()\r\n        };\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}